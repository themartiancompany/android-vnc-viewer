#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    _check_cmd \
      "activity-launch" \
      "android-activity-utils"
    _check_cmd \
      "activity-focused" \
      "android-activity-utils"
  fi
}

# shellcheck disable=SC2034
_global_variables() {
  view_date=""
  viet_target=""
  view_address=""
  view_port=""
  view_password=""
  view_length=""
  poll_interval=""
  viewer_app=""
  display_dim=""
  touch_disabled=""
  color=""
  quiet=""
}

_activity_check() {
  local
    _current_activity="${1}"
  _msg_info \
    "$(_get_date_human) checking activity"
  if \
    [[ "${_current_activity}" != "${_app}/"* ]]; then
      _msg_info \
        "Current activity: ${_current_activity}"
      _msg_info \
        "Target activity: ${_app}/${_app}.ui.MainMenuActivity"
      activity-launch \
        "${_viewer_app_opts[@]}" \
        "${_app}" \
        "ui.MainMenuActivity" || \
        true
  else
    if [[ "${_current_activity}" != "${_app}/${_app}.ui.VncCanvasActivity" ]]; then
      _msg_info \
        "Current activity: ${_current_activity}"
      _msg_info \
        "Target activity: ${_app}/${_app}.ui.VncCanvasActivity"
      activity-launch \
        "${_viewer_app_opts[@]}" \
        "${_app}" \
        "ui.VncCanvasActivity" || \
        true
    fi
  fi || \
    true
} 

_service() {
  local \
    _length="${1}" \
    _poll="${2}" \
    _app="${3}" \
    _dim="${4}" \
    _touch_disabled="${5}" \
    _bbrightnessctl_opts=() \
    _touchctl_opts=() \
    _touchctl_opts=() \
    _time=0 \
    _conf \
    _touch_status \
    _old_activity
  _msg_info \
    "service started"
  _conf="$( \
    _get_conf_path)"
  _old_activity="$( \
    activity-focused)"
  if [[ "quiet" != "y" ]]; then
    _bbrightnessctl_opts+=(
      -v
    )
    _touchctl_opts+=(
      -v
    )
    _viewer_app_opts+=(
      -v
    )
  fi
  _touch_status="$( \
    touchctl \
      status || \
      true)"
  if [[ "${_touch_status}" == "enabled" ]] && \
     [[ "${_touch_disabled}" == "y" ]]; then
    _msg_info \
      "Disabling touch input"
    touchctl \
      "${_touchctl_opts[@]}" \
      disable || \
    true
  fi || \
    true
  while \
    (( ${_time} < ${_length} )); do
    _current_activity="$( \
      activity-focused)"
    _activity_check \
      "${_current_activity}"
    if [[ "${_dim}" == "y" ]]; then
      _brightness_check
    fi
    sleep \
      "${_poll}"
    _time="$(( \
      _time + _poll ))"
  done
  _touch_status="$( \
    touchctl \
      status)"
  if \
    [[ "${_touch_status}" == "disabled" ]] && \
    [[ "${_touch_disabled}" == "y" ]]; then
    _msg_info \
      "Re-enabling touch input"
    touchctl \
      "${_touchctl_opts[@]}" \
      enable || \
    true
  fi
  # activity-launch \
  #   "${_old_activity}" \
  #   "${_old_activity}" || \
  #     true
  _write_setting \
    "${_conf}" \
    "viewer_mode" \
    "disabled"
}

_android_vnc_viewer() {
  local \
    _length="${1}" \
    _app="${2}" \
    _poll="${3}" \
    _dim="${4}" \
    _touch_disabled="${5}" \
    _cmd_opts=() \
    _opts=() \
    _activity_launch_opts=() \
    _conf
  shift \
    5
  _opts=(
    "$@"
  )
  _conf="$( \
    _get_conf_path)"
  if [[ "quiet" != "y" ]]; then
    _activity_launch_opts+=(
      -v
    )
  fi
  # _a="$( \
  #     _read_settings \
  #       "${_conf}" \
  #       "${_host}" \
  #       "port")"
  # 'net.sourceforge.opencamera' 'MainActivity'
  _cmd_opts+=(
    "${_length}"
    "${_poll}"
    "${_app}"
    "${_dim}"
    "${_touch_disabled}"
  )
  activity-launch \
    "${_activity_launch_opts[@]}" \
    "${_app}" \
    "ui.MainMenuActivity" || \
    true

  "_service" \
    "${_cmd_opts[@]}" \
    "${_opts[*]}"
}

_viewer_app_auto_detect() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    echo \
      'com.coboltforge.dontmind.multivnc'
  fi
}

_server_app_auto_detect() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == 'Android' ]]; then
    echo \
      'droidvnc'
  fi
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$(_get "app" "name")"
  _conf="${_dir}/$( \
    _get \
      "app" \
      "name").cfg"
  echo \
    "${_conf}"
}

_target_opts_auto_detect() {
  local \
    _dynssh_opts=()
  # if [[ "${quiet}" != "y" ]]; then
  #   _dynssh_opts+=(
  #     -v
  #   )
  # fi
  if [[ "${view_target}" != "" ]]; then
    _dynssh_opts+=(
      -t
        "${_view_target}"
    )
    dynssh \
      "${_dynssh_opts[@]}" -- \
      "${view_target}" \
      "droidvnc-helpen"
    _set_override \
      "view" \
      "address" \
      ""
    _set_override \
      "view" \
      "port" \
      ""
    _set_override \
      "view" \
      "password" \
      ""
  fi
}

_set_overrides() {
  _set_override \
    "view" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "view" \
    "target" \
    ""
  _set_override \
    "view" \
    "address" \
    ""
  _set_override \
    "view" \
    "port" \
    ""
  _set_override \
    "view" \
    "password" \
    ""
  _target_opts_auto_detect
  _set_override \
    "view" \
    "length" \
    "$(( 10 * 60 ))" # 10 minutes
    # "$(( 60 * 60 * 24 ))" # 24 hours
  _set_override \
    "viewer" \
    "app" \
    "$(_viewer_app_auto_detect)"
  _set_override \
    "server" \
    "app" \
    "$(_server_app_auto_detect)"
  _set_override \
    "poll" \
    "interval" \
    "30"
  _set_override \
    "display" \
    "dim" \
    "n"
  _set_override \
    "touch" \
    "disabled" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                View date:   $(_get "view" "date")"
  _msg_info "              View target:   $(_get "view" "target")"
  _msg_info "             View address:   $(_get "view" "address")"
  _msg_info "                View port:   $(_get "view" "port")"
  _msg_info "            View password:   $(_get "view" "password" != "" && echo "****")"
  _msg_info "              View length:   $(_get "view" "length")"
  _msg_info "            Poll interval:   $(_get "poll" "interval")"
  _msg_info "               Viewer app:   $(_get "viewer" "app")"
  _msg_info "               Server app:   $(_get "server" "app")"
  _msg_info "              Display dim:   $(_get "display" "dim")"
  _msg_info "           Touch disabled:   $(_get "touch" "disabled")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Opens a VNC session.

Usage:
  $(_get "app" "name")
    [options]
  options:
     -t <view_target>     Target host.
			  Default: $(_get "view" "target")
     -a <view_address>    Address of the VNC server.
			  Default: $(_get "view" "address")
     -P <view_port>       Port of the VNC server.
			  Default: $(_get "view" "port")
     -k <view_password>   Password for the VNC server.
			  Default: $(_get "view" "password")
     -L <view_length>     View length in seconds.
			  Default: $(_get "view" "length")
     -A <viewer_app>      Android VNC viewer app which will be launched.
			  Default: $(_get "viewer" "app")
     -S <server_app>      Destination Android VNC server app.
			  Default: $(_get "server" "app")
     -d                   Whether to dim the screen or not.
			  Default: $(_get "display" "dim")
     -T                   Whether to disable touch or not.
			  Default: $(_get "touch" "disabled")
     -P                   Poll interval for brightness and
                          touch reset in seconds.
			  Default: $(_get "poll" "interval")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:a:p:k:L:A:S:P:dTcvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_view_target="${OPTARG}" ;;
    a) override_view_address="${OPTARG}" ;;
    p) override_view_port="${OPTARG}" ;;
    k) override_view_password="${OPTARG}" ;;
    L) override_view_length="${OPTARG}" ;;
    A) override_viewer_app="${OPTARG}" ;;
    S) override_viewer_server="${OPTARG}" ;;
    P) override_poll_interval="${OPTARG}" ;;
    d) override_display_dim="y" ;;
    T) override_touch_disabled="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_config_user_init \
  "$(_get 'app' 'name')"
app_opts=(
  "$(_get \
       "view" \
       "target")"
  "$(_get \
       "view" \
       "address")"
  "$(_get \
       "view" \
       "port")"
  "$(_get \
       "view" \
       "password")"
  "$(_get \
       "view" \
       "length")"
  "$(_get \
       "viewer" \
       "app")"
  "$(_get \
       "server" \
       "app")"
  "$(_get \
       "poll" \
       "interval")"
  "$(_get \
       "display" \
       "dim")"
  "$(_get \
       "touch" \
       "disabled")"
)
_show_config
_android_vnc_viewer \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
